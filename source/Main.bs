import "pkg:/components/manager/ViewCreator.bs"
import "pkg:/source/enums/ItemType.bs"
import "pkg:/source/enums/String.bs"

sub Main (args as dynamic) as void
    ' The main function that runs when the application is launched.
    m.screen = CreateObject("roSGScreen")
    m.port = CreateObject("roMessagePort")
    m.screen.setMessagePort(m.port)

    ' Set global constants
    setConstants()

    ' Set any initial Global Variables
    m.global = m.screen.getGlobalNode()
    SaveAppToGlobal()
    SaveDeviceToGlobal()

    session.Init()

    m.scene = m.screen.CreateScene("BaseScene")
    m.screen.show() ' vscode_rale_tracker_entry
    'vscode_rdb_on_device_component_entry

    playstateTask = CreateObject("roSGNode", "PlaystateTask")
    playstateTask.id = "playstateTask"

    sceneManager = CreateObject("roSGNode", "SceneManager")
    sceneManager.observeField("dataReturned", m.port)

    m.global.addFields({ app_loaded: false, playstateTask: playstateTask, sceneManager: sceneManager })
    m.global.addFields({ queueManager: CreateObject("roSGNode", "QueueManager") })
    m.global.addFields({ audioPlayer: CreateObject("roSGNode", "AudioPlayer") })
    m.global.addFields({ jumpTo: {} })

    m.global.observeField("jumpTo", m.port)

    'audioMiniPlayer = m.scene.findNode("audioMiniPlayer")
    'if isValid(audioMiniPlayer)
    '    audioMiniPlayer.callFunc("setup")
    'end if

    app_start:
    ' First thing to do is validate the ability to use the API
    if not LoginFlow() then return

    ' remove login scenes from the stack
    sceneManager.callFunc("clearScenes")

    ' load home page
    group = CreateHomeGroup()
    group.callFunc("loadLibraries")
    stopLoadingSpinner()
    sceneManager.callFunc("pushScene", group)

    m.scene.observeField("exit", m.port)

    ' Download and store the fallback font to tmp:/
    ' This font may be used for CJK subtitles
    downloadFallbackFont()

    ' Delete any old library filters
    clearOldLibraryFilters()

    ' Handle input messages
    input = CreateObject("roInput")
    input.SetMessagePort(m.port)

    device = CreateObject("roDeviceInfo")
    device.setMessagePort(m.port)
    device.EnableScreensaverExitedEvent(true)
    device.EnableAudioGuideChangedEvent(true)
    device.EnableLowGeneralMemoryEvent(true)
    device.EnableCodecCapChangedEvent(true)

    ' Check if we were sent content to play with the startup command (Deep Link)
    onDeepLinkingEvent(args)

    m.scene.observeField("signOutSelected", m.port)
    m.scene.observeField("changeServerSelected", m.port)

    sidebar = m.scene.findNode("sidebar")
    sidebar.observeField("selectedLibrary", m.port)

    while true
        msg = wait(0, m.port)

        if type(msg) = "roSGScreenEvent" and msg.isScreenClosed()
            print "SCREEN CLOSED"
            return
        end if

        if isNodeEvent(msg, "exit")
            print "CLOSING SCREEN"
            return
        end if

        if isNodeEvent(msg, "jumpTo")
            onJumpToEvent(msg)
        else if isNodeEvent(msg, "quickPlayNode")
            onQuickPlayEvent(msg)
        else if isNodeEvent(msg, "refreshSeasonDetailsData")
            onRefreshSeasonDetailsDataEvent()
        else if isNodeEvent(msg, "refreshMovieDetailsData")
            onRefreshMovieDetailsDataEvent()
        else if isNodeEvent(msg, "selectedItem")
            onSelectedItemEvent(msg)
        else if isNodeEvent(msg, "selectedLibrary")
            onSelectedItemEvent(msg)
        else if isNodeEvent(msg, "movieSelected")
            onMovieSelectedEvent(msg)
        else if isNodeEvent(msg, "seriesSelected")
            onSeriesSelectedEvent(msg)
        else if isNodeEvent(msg, "seasonSelected")
            onSeasonSelectedEvent(msg)
        else if isNodeEvent(msg, "musicAlbumSelected")
            onMusicAlbumSelectedEvent(msg)
        else if isNodeEvent(msg, "appearsOnSelected")
            onAppearsOnSelectedEvent(msg)
        else if isNodeEvent(msg, "similarArtistSelected")
            onSimilarArtistSelectedEvent(msg)
        else if isNodeEvent(msg, "playSong")
            onPlaySongEvent(msg)
        else if isNodeEvent(msg, "subtitleToDelete")
            onSubtitleToDeleteEvent(msg)
        else if isNodeEvent(msg, "subtitleSearchButtonSelected")
            onSubtitleSearchButtonSelectedEvent()
        else if isNodeEvent(msg, "subtitleLanguageButtonSelected")
            onSubtitleLanguageButtonSelectedEvent()
        else if isNodeEvent(msg, "playlistItemSelected")
            onPlaylistItemSelectedEvent(msg)
        else if isNodeEvent(msg, "playArtistSelected")
            onPlayArtistSelectedEvent(msg)
        else if isNodeEvent(msg, "instantMixSelected")
            onInstantMixSelectedEvent(msg)
        else if isNodeEvent(msg, "search_value")
            onSearch_valueEvent(msg)
        else if isNodeEvent(msg, "itemSelected")
            onItemSelectedEvent(msg)
        else if isNodeEvent(msg, "buttonSelected")
            onButtonSelectedEvent(msg)
        else if isNodeEvent(msg, "content")
            onContentEvent(msg)
        else if isNodeEvent(msg, "changeServerSelected")
            if m.scene.changeServerSelected
                unset_setting("server")
                session.server.Delete()
                SignOut()
                m.scene.changeServerSelected = false
                sceneManager.callFunc("clearScenes")
                goto app_start
            end if
        else if isNodeEvent(msg, "signOutSelected")
            if m.scene.signOutSelected
                SignOut()
                m.scene.signOutSelected = false
                sceneManager.callFunc("clearScenes")
                goto app_start
            end if
        else if isNodeEvent(msg, "state")
            onStateEvent(msg)
        else if type(msg) = "roDeviceInfoEvent"
            onRoDeviceInfoEvent(msg)
        else if type(msg) = "roInputEvent"
            if msg.IsInput()
                info = msg.GetInfo()
                onDeepLinkingEvent(info)
            end if
        else if isNodeEvent(msg, "returnData")
            onReturnDataEvent(msg)
        else if isNodeEvent(msg, "dataReturned")
            onDataReturnedEvent(msg)
        else
            print "Unhandled " type(msg)
            print msg
        end if
    end while
end sub

sub downloadFallbackFont()
    configEncoding = api.system.GetConfigurationByName("encoding")

    if isChainValid(configEncoding, "EnableFallbackFont")
        if configEncoding.EnableFallbackFont
            re = CreateObject("roRegex", "Name.:.(.*?).,.Size", "s")
            filename = APIRequest("FallbackFont/Fonts").GetToString()
            if isValid(filename)
                filename = re.match(filename)
                if isValidAndNotEmpty(filename)
                    filename = filename[1]
                    APIRequest("FallbackFont/Fonts/" + filename).gettofile("tmp:/font")
                end if
            end if
        end if
    end if
end sub

sub clearOldLibraryFilters()
    forgetFilters = m.global.session.user.settings["itemgrid.forgetFilters"] ?? true
    if not forgetFilters then return

    for each settingKeys in m.global.session.user.settings.keys()
        if isStringEqual(left(settingKeys, 8), "display.")
            if isStringEqual(right(settingKeys, 7), ".filter") or isStringEqual(right(settingKeys, 14), ".filterOptions")
                m.global.session.user.settings.delete(settingKeys)
                unset_user_setting(settingKeys)
            end if
        end if
    end for
end sub
