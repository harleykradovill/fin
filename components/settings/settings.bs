import "pkg:/source/enums/ColorPalette.bs"
import "pkg:/source/enums/KeyCode.bs"
import "pkg:/source/utils/config.bs"
import "pkg:/source/utils/deviceCapabilities.bs"
import "pkg:/source/utils/misc.bs"

sub init()
    m.top.optionsAvailable = false

    m.userLocation = []

    m.settingsMenu = m.top.findNode("settingsMenu")
    m.settingsMenu.focusBitmapBlendColor = ColorPalette.HIGHLIGHT
    m.settingsMenu.focusFootprintBlendColor = ColorPalette.TRANSPARENT
    m.settingsMenu.focusedColor = ColorPalette.WHITE

    testRectangle = m.top.findNode("testRectangle")
    testRectangle.blendColor = ColorPalette.VIEWBACKGROUND

    m.settingDesc = m.top.findNode("settingDesc")
    m.path = m.top.findNode("path")

    m.boolSetting = m.top.findNode("boolSetting")
    m.integerSetting = m.top.findNode("integerSetting")

    m.radioSetting = m.top.findNode("radioSetting")
    m.radioSetting.focusBitmapBlendColor = ColorPalette.HIGHLIGHT
    m.radioSetting.focusFootprintBlendColor = ColorPalette.TRANSPARENT
    m.radioSetting.focusedColor = ColorPalette.WHITE

    m.integerSetting.observeField("submit", "onKeyGridSubmit")
    m.integerSetting.observeField("escape", "onKeyGridEscape")

    m.settingsMenu.setFocus(true)
    m.settingsMenu.observeField("itemFocused", "settingFocused")
    m.settingsMenu.observeField("itemSelected", "settingSelected")

    m.boolSetting.observeField("checkedItem", "boolSettingChanged")
    m.radioSetting.observeField("checkedItem", "radioSettingChanged")

    m.serverInfo = m.top.findNode("serverInfo")
    m.buildInfo = m.top.findNode("buildInfo")
    m.privacyPolicy = m.top.findNode("privacyPolicy")
    m.serverData = m.global.session.server

    m.postTask = createObject("roSGNode", "PostTask")

    m.keypressTimer = m.top.findNode("keypressTimer")
    m.keypressTimer.observeField("fire", "onKeypressTimerFire")

    m.sceneManager = m.global.sceneManager

    ' Load Configuration Tree
    m.configTree = GetConfigTree()
    LoadMenu({ children: m.configTree })
end sub

sub onKeypressTimerFire()
    m.keypresses.clear()
end sub

sub onKeyGridSubmit()
    selectedSetting = m.userLocation.peek().children[m.settingsMenu.itemFocused]
    set_user_setting(selectedSetting.settingName, m.integerSetting.text)
    m.settingsMenu.setFocus(true)
end sub

sub onKeyGridEscape()
    if m.integerSetting.escape = "left" or m.integerSetting.escape = "back"
        m.settingsMenu.setFocus(true)
    end if
end sub

sub LoadMenu(configSection)
    if configSection.children = invalid
        ' Load parent menu
        m.userLocation.pop()
        configSection = m.userLocation.peek()
    else
        settingsArray = []
        for each item in configSection.children
            settingsArray.push(item)
        end for

        configSection.children = settingsArray

        if m.userLocation.Count() > 0 then m.userLocation.peek().selectedIndex = m.settingsMenu.itemFocused
        m.userLocation.push(configSection)
    end if

    result = CreateObject("roSGNode", "ContentNode")

    for each item in configSection.children
        listItem = result.CreateChild("ContentNode")
        listItem.title = tr(item.title)
        listItem.Description = tr(item.description)
        listItem.id = item.id
    end for

    m.settingsMenu.content = result

    if configSection.selectedIndex <> invalid and configSection.selectedIndex > -1
        m.settingsMenu.jumpToItem = configSection.selectedIndex
    end if

    ' Set Path display
    m.path.text = tr("Settings")
    for each level in m.userLocation
        if level.title <> invalid then m.path.text += " / " + tr(level.title)
    end for
end sub

sub settingFocused()

    selectedSetting = m.userLocation.peek().children[m.settingsMenu.itemFocused]
    m.settingDesc.text = tr(selectedSetting.Description)

    ' Hide Settings
    m.boolSetting.visible = false
    m.integerSetting.visible = false
    m.radioSetting.visible = false
    m.buildInfo.visible = false
    m.serverInfo.visible = false
    m.privacyPolicy.visible = false

    if selectedSetting.type = invalid
        return
    else if selectedSetting.type = "bool"

        m.boolSetting.visible = true

        if m.global.session.user.settings[selectedSetting.settingName] = true
            m.boolSetting.checkedItem = 1
        else
            m.boolSetting.checkedItem = 0
        end if
    else if selectedSetting.type = "integer"
        integerValue = m.global.session.user.settings[selectedSetting.settingName].ToStr()
        if isValid(integerValue)
            m.integerSetting.text = integerValue
        end if
        m.integerSetting.visible = true
    else if LCase(selectedSetting.type) = "radio"

        selectedValue = m.global.session.user.settings[selectedSetting.settingName]

        radioContent = CreateObject("roSGNode", "ContentNode")

        itemIndex = 0
        for each item in m.userLocation.peek().children[m.settingsMenu.itemFocused].options
            listItem = radioContent.CreateChild("ContentNode")
            listItem.title = tr(item.title)
            listItem.id = item.id
            if selectedValue = item.id
                m.radioSetting.checkedItem = itemIndex
            end if
            itemIndex++
        end for

        m.radioSetting.content = radioContent

        m.radioSetting.visible = true

    else if LCase(selectedSetting.type) = "action"
        return

    else if LCase(selectedSetting.type) = "info"
        if LCase(selectedSetting.settingName) = "global.serverinfo"
            m.serverName = m.top.findNode("serverName")
            m.serverVersion = m.top.findNode("serverVersion")
            m.serverURL = m.top.findNode("serverURL")
            m.serverHealth = m.top.findNode("serverHealth")

            s = m.serverData

            if s <> invalid
                m.serverName.text = s.name
                m.serverVersion.text = s.version
                m.serverURL.text = s.url
                if s.hasError
                    m.serverHealth.text = "Error"
                    m.serverHealth.color = "#ff4c4c"
                else
                    m.serverHealth.text = "Good"
                    m.serverHealth.color = "#33cc33"
                end if
            end if

            m.serverInfo.visible = true
        end if

        if LCase(selectedSetting.settingName) = "global.buildinfo"
            m.finVersion = m.top.findNode("finVersion")
            m.buildType = m.top.findNode("buildType")
            m.buildDate = m.top.findNode("buildDate")

            m.finVersion.text = "1.1.001"
            m.buildType.text = "Release"
            m.buildDate.text = "2025-01-01"

            m.buildInfo.visible = true
        end if

        if LCase(selectedSetting.settingName) = "global.privacy"
            m.tldrtext1 = m.top.findNode("tldrText1")
            m.tldrtext2 = m.top.findNode("tldrText2")
            m.tldrtext3 = m.top.findNode("tldrText3")
            m.tldrtext4 = m.top.findNode("tldrText4")
            m.tldrtext5 = m.top.findNode("tldrText5")
            m.tldrtext6 = m.top.findNode("tldrText6")

            m.tldrtext1.text = "- We (Fin) do not actively collect or store your personal data."
            m.tldrtext2.text = "- Roku may collect device and usage data (e.g. session counts, crashes)."
            m.tldrtext3.text = "- We can see aggregated analytics via the Roku developer console."
            m.tldrtext4.text = "- This data is only used to improve app performance, not to track or identify users."
            m.tldrtext5.text = "- This privacy summary and the full privacy policy may change at any time."

            m.tldrtext6.text = "The full privacy policy may be found on the Roku store channel."

            m.privacyPolicy.visible = true
        end if
        return
    else
        print `Unknown setting type ${selectedSetting.type}`
    end if

end sub

sub settingSelected()

    selectedItem = m.userLocation.peek().children[m.settingsMenu.itemFocused]

    if selectedItem.type <> invalid ' Show setting
        if selectedItem.type = "bool"
            m.boolSetting.setFocus(true)
        end if
        if selectedItem.type = "integer"
            m.integerSetting.setFocus(true)
        end if
        if (selectedItem.type) = "radio"
            m.radioSetting.setFocus(true)
        end if

        if (selectedItem.type) = "info"
        end if

        if (selectedItem.type) = "action"
            if (selectedItem.settingName) = "account.signOut"
                m.top.getScene().signOutSelected = true
                return
            else if (selectedItem.settingName) = "account.changeServer"
                m.top.getScene().changeServerSelected = true
                return
            end if
        end if
    else if selectedItem.children <> invalid and selectedItem.children.Count() > 0 ' Show sub menu
        LoadMenu(selectedItem)
        m.settingsMenu.setFocus(true)
    else
        return
    end if

    m.settingDesc.text = m.settingsMenu.content.GetChild(m.settingsMenu.itemFocused).Description

end sub


sub boolSettingChanged()
    if m.boolSetting.focusedChild = invalid then return
    selectedSetting = m.userLocation.peek().children[m.settingsMenu.itemFocused]

    if m.boolSetting.checkedItem
        session.user.settings.Save(selectedSetting.settingName, "true")
        if Left(selectedSetting.settingName, 7) = "global."
            ' global user setting
            ' save to main registry block
            set_setting(selectedSetting.settingName, "true")
            ' setting specific triggers
            if selectedSetting.settingName = "global.rememberme"
                set_setting("active_user", m.global.session.user.id)
            end if
        else
            ' regular user setting
            ' save to user specific registry block
            set_user_setting(selectedSetting.settingName, "true")
        end if
    else
        session.user.settings.Save(selectedSetting.settingName, "false")
        if Left(selectedSetting.settingName, 7) = "global."
            ' global user setting
            ' save to main registry block
            set_setting(selectedSetting.settingName, "false")
            ' setting specific triggers
            if selectedSetting.settingName = "global.rememberme"
                unset_setting("active_user")
            end if
        else
            ' regular user setting
            ' save to user specific registry block
            set_user_setting(selectedSetting.settingName, "false")
        end if
    end if
end sub

sub radioSettingChanged()
    if m.radioSetting.focusedChild = invalid then return
    selectedSetting = m.userLocation.peek().children[m.settingsMenu.itemFocused]
    set_user_setting(selectedSetting.settingName, m.radioSetting.content.getChild(m.radioSetting.checkedItem).id)
end sub

' JFScreen hook that gets ran as needed.
' Assumes settings were changed and they affect the device profile.
' Posts a new device profile to the server using the task thread
sub OnScreenHidden()
    m.postTask.arrayData = getDeviceCapabilities()
    m.postTask.apiUrl = "/Sessions/Capabilities/Full"
    m.postTask.control = "RUN"
    m.postTask.observeField("responseCode", "postFinished")
end sub

' Triggered by m.postTask after completing a post.
' Empty the task data when finished.
sub postFinished()
    m.postTask.unobserveField("responseCode")
    m.postTask.callFunc("empty")
end sub

' Returns true if any of the data entry forms are in focus
function isFormInFocus() as boolean
    if m.radioSetting.hasFocus() or m.boolSetting.hasFocus() or m.integerSetting.hasFocus()
        return true
    end if
    return false
end function

function onKeyEvent(key as string, press as boolean) as boolean
    if not press then return false

    if (key = "back" or key = "left") and m.settingsMenu.focusedChild <> invalid and m.userLocation.Count() > 1
        LoadMenu({})
        return true
    else if (key = "back" or key = "left") and isFormInFocus()
        m.settingsMenu.setFocus(true)
        return true
    end if

    if key = "options"
        m.global.sceneManager.callFunc("popScene")
        return true
    end if

    if key = "right"
        settingSelected()
    end if

    return false
end function
