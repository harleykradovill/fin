import "pkg:/source/enums/KeyCode.bs"
import "pkg:/source/enums/PosterLoadStatus.bs"
import "pkg:/source/utils/misc.bs"

sub init()
    m.bg = m.top.findNode("bg")
    m.menu = m.top.findNode("menu")
    m.expandAnim = m.top.findNode("expandAnim")
    m.collapseAnim = m.top.findNode("collapseAnim")
    m.libraryMap = {}

    m.menu.observeField("itemSelected", "itemActivated")
    staticRoot = createObject("roSGNode", "ContentNode")

    homeNode = createObject("roSGNode", "ContentNode")
    homeNode.title = "Home"
    homeNode.hdposterurl = "pkg:/images/sidebar/home.png"
    homeNode.tag = "home"
    homeNode.addField("showLabel", "boolean", m.top.isOpen)
    homeNode.showLabel = m.top.isOpen
    staticRoot.appendChild(homeNode)

    searchNode = createObject("roSGNode", "ContentNode")
    searchNode.title = "Search"
    searchNode.hdposterurl = "pkg:/images/sidebar/search.png"
    searchNode.tag = "search"
    searchNode.addField("showLabel", "boolean", m.top.isOpen)
    searchNode.showLabel = m.top.isOpen
    staticRoot.appendChild(searchNode)

    settingsNode = createObject("roSGNode", "ContentNode")
    settingsNode.title = "Settings"
    settingsNode.hdposterurl = "pkg:/images/sidebar/settings.png"
    settingsNode.tag = "settings"
    settingsNode.addField("showLabel", "boolean", m.top.isOpen)
    settingsNode.showLabel = m.top.isOpen
    staticRoot.appendChild(settingsNode)

    m.menu.content = staticRoot
    m.profileImage = m.top.findNode("overlayCurrentUserProfileImage")
    m.overlayCurrentUser = m.top.findNode("overlayCurrentUser")
    m.top.addField("selectedItem", "node", false)

    updateUserProfileImage()
end sub

sub loadLibraries(libArray as object)
    if not isValid(libArray) then return

    for i = m.menu.content.getChildCount() - 1 to 0 step -1
        n = m.menu.content.getChild(i)
        if left(n.tag, 8) = "library:" then m.menu.content.removeChildIndex(i)
    end for

    insertPos = 3
    m.libraryMap = {}

    for each lib in libArray
        n = createObject("roSGNode", "ContentNode")
        n.title = lib.name
        n.hdposterurl = getLibraryIcon(lib)
        n.tag = "library:" + lib.id

        n.addField("collectionType", "string", false)
        n.addField("json", "assocarray", false)
        n.addField("type", "string", false)
        n.collectionType = lib.collectionType
        n.json = lib.json
        n.type = "collectionfolder"

        n.addField("showLabel", "boolean", m.top.isOpen)
        n.showLabel = m.top.isOpen

        m.menu.content.insertChild(n, insertPos)
        insertPos = insertPos + 1
        m.libraryMap[lib.id] = n
    end for
end sub

function getLibraryIcon(lib as object) as string
    typ = ""
    if isValid(lib.collectionType) then typ = lib.collectionType
    if isValid(lib.json) and isValid(lib.json.CollectionType)
        typ = lib.json.CollectionType
    end if
    typ = lcase(typ)

    if typ = "movies"
        return "pkg:/images/sidebar/movie.png"
    else if typ = "tvshows" or typ = "series"
        return "pkg:/images/sidebar/tv.png"
    else if typ = "music"
        return "pkg:/images/sidebar/music_white.png"
    else if typ = "photos" or typ = "photofolder" or typ = "pictures"
        return "pkg:/images/sidebar/photofolder.png"
    else if typ = "livetv" or typ = "live" or typ = "channels"
        return "pkg:/images/sidebar/live_tv_white.png"
    else
        return "pkg:/images/sidebar/library.png"
    end if
end function

sub isOpenChanged()
    isOpen = m.top.isOpen
    sceneContent = m.top.getScene().findNode("content")

    for i = 0 to m.menu.content.getChildCount() - 1
        child = m.menu.content.getChild(i)
        child.showLabel = isOpen
    end for

    if isOpen
        m.menu.itemSize = [316, 80]
        m.expandAnim.control = "start"
        sceneContent.translation = [260, 0]
    else
        m.menu.itemSize = [92, 80]
        m.collapseAnim.control = "start"
        sceneContent.translation = [0, 0]
    end if
end sub

sub updateUser()
    user = m.top.findNode("overlayCurrentUser")
    if isValid(user)
        user.text = m.top.currentUser
    end if
end sub

sub updateUserProfileImage()
    m.profileImage.observeField("loadStatus", "onPosterLoadStatusChanged")
    if isValid(m.profileImage)
        m.profileImage.uri = m.top.currentUserProfileImage
    end if
end sub

sub onPosterLoadStatusChanged()
    if m.profileImage.loadStatus <> PosterLoadStatus.LOADING
        m.profileImage.unobserveField("loadStatus")
    end if

    if m.profileImage.loadStatus = PosterLoadStatus.FAILED
        if m.profileImage.loadWidth = 0
            m.profileImage.uri = "pkg:/images/baselinePerson.png"
        end if
    end if
end sub

function onKeyEvent(key as string, press as boolean) as boolean
    if not press then return false

    if key = KeyCode.RIGHT or key = KeyCode.BACK
        m.top.isOpen = false

        if isValid(m.top.previousFocus)
            m.top.previousFocus.setFocus(true)
        else
            m.top.getScene().findNode("content").setFocus(true)
        end if
        return true
    end if

    return false
end function

function CreateSearchPage()
    group = CreateObject("roSGNode", "searchResults")
    group.observeField("quickPlayNode", m.port)
    options = group.findNode("searchRow")
    options.observeField("itemSelected", m.port)

    return group
end function

sub itemActivated()
    idx = m.menu.itemSelected
    if idx < 0 then return

    node = m.menu.content.getChild(idx)
    tag = node.tag

    if tag = "home"
        sm = m.global.sceneManager
        if isValid(sm)
            while true
                cur = sm.callFunc("getActiveScene")
                if not isValid(cur) then exit while
                if cur.isSubType("Home") then exit while
                sm.callFunc("popScene")
            end while
        end if

        hr = m.top.getScene().findNode("homeRows")
        if isValid(hr) then hr.setFocus(true)
    end if

    if tag = "search"
        searchScene = CreateSearchPage()
        m.global.sceneManager.callFunc("pushScene", searchScene)
        keyNode = searchScene.findNode("SearchBox").findNode("search_Key")
        if isValid(keyNode)
            keyNode.setFocus(true)
            searchScene.lastFocus = keyNode
            keyNode.active = true
        end if
    end if

    if tag = "settings"
        if m.global.audioPlayer.state = "playing"
            m.global.audioPlayer.control = "stop"
        end if

        settingsScreen = createObject("roSGNode", "Settings")
        m.global.sceneManager.callFunc("pushScene", settingsScreen)
    end if

    if left(tag, 8) = "library:"
        libId = mid(tag, 9)
        libNode = m.libraryMap.LookupCI(libId)
        if isValid(libNode)
            m.top.selectedLibrary = libNode

            libraryScene = m.global.sceneManager.callFunc("getActiveScene")
            if isValid(libraryScene)
                contentNode = libraryScene.findNode("libraryRows")
                if isValid(contentNode)
                    contentNode.setFocus(true)
                    libraryScene.lastFocus = contentNode
                end if
            end if

            m.top.selectedLibrary = invalid
        else
            m.global.sceneManager.callFunc(
            "standardDialog", "Library not found",
            "Couldn't locate the selected library.")
        end if
    end if

    m.top.isOpen = false
end sub
