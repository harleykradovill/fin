import "pkg:/source/api/baserequest.bs"
import "pkg:/source/api/Image.bs"
import "pkg:/source/enums/ColorPalette.bs"
import "pkg:/source/enums/ItemType.bs"
import "pkg:/source/enums/KeyCode.bs"
import "pkg:/source/enums/TaskControl.bs"
import "pkg:/source/utils/config.bs"
import "pkg:/source/utils/deviceCapabilities.bs"
import "pkg:/source/utils/misc.bs"

sub init()
    m.isFirstRun = true
    m.top.optionsAvailable = false
    m.postTask = createObject("roSGNode", "PostTask")

    m.loadItemsTask1 = createObject("roSGNode", "LoadItemsTask")
    m.loadItemsTask1.observeField("content", "onMyListLoaded")
    m.loadItemsTask1.itemsToLoad = "isInMyList"

    m.homeRows = m.top.findNode("homeRows")
    m.homeRows.focusBitmapBlendColor = ColorPalette.WHITE

    m.optionsSlider = m.top.findNode("options")
    if isValid(m.optionsSlider)
        m.optionsSlider.observeField("visible", "onOptionsVisible")
        m.optionsSlider.observeField("closeSidePanel", "onOptionsClose")
        'm.slideLeftAnim = m.top.findNode("homeRowsSlideLeft")
        'm.slideRightAnim = m.top.findNode("homeRowsSlideRight")
        m.optsInAnim = m.top.findNode("optionsSlideIn")
        m.optsOutAnim = m.top.findNode("optionsSlideOut")

    else
        print "WARN(Home): OptionsSlider not found during init()"
    end if

end sub

sub onOptionsVisible()
    if m.optionsSlider.visible
        if isValid(m.slideLeftAnim) and isValid(m.optsInAnim)
            'm.slideLeftAnim.control = "start"
            m.optsInAnim.control = "start"
        else
            'm.homeRows.translation = [-411, 158]
            m.optionsSlider.translation = [500, 89]
            m.optionsSlider.translation = [0, 89]
        end if
    end if
end sub

sub onOptionsClose()
    if m.optionsSlider.closeSidePanel
        if isValid(m.slideRightAnim) and isValid(m.optsOutAnim)
            'm.slideRightAnim.control = "start"
            m.optsOutAnim.control = "start"
        else
            'm.homeRows.translation = [89, 158]
            m.optionsSlider.translation = [500, 89]
        end if
        m.optionsSlider.closeSidePanel = false
    end if
end sub

sub refresh()
    m.homeRows.callFunc("updateHomeRows")
end sub

sub loadLibraries()
    m.homeRows.callFunc("loadLibraries")
end sub

' JFScreen hook called when the screen is displayed by the screen manager
sub OnScreenShown()
    scene = m.top.getScene()
    sb = scene.findNode("sidebar")

    if isValid(sb)
        sb.currentUserProfileImage = UserImageURL(m.global.session.user.id)
        sb.currentUser = m.global.session.user.name
    end if

    if isValid(m.top.lastFocus)
        m.top.lastFocus.setFocus(true)
    else
        m.top.setFocus(true)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.top
    end if

    if not m.isFirstRun
        refresh()
    end if

    ' post the device profile the first time this screen is loaded
    if m.isFirstRun
        m.isFirstRun = false
        m.postTask.arrayData = getDeviceCapabilities()
        m.postTask.apiUrl = "/Sessions/Capabilities/Full"
        m.postTask.control = "RUN"
        m.postTask.observeField("responseCode", "postFinished")
    end if
end sub

' JFScreen hook called when the screen is hidden by the screen manager
sub OnScreenHidden()
end sub

' Triggered by m.postTask after completing a post.
' Empty the task data when finished.
sub postFinished()
    m.postTask.unobserveField("responseCode")
    m.postTask.callFunc("empty")
end sub

sub onMyListLoaded()
    isInMyListData = m.loadItemsTask1.content
    m.loadItemsTask1.content = []

    if not isValidAndNotEmpty(isInMyListData) then return

    focusedItem = m.homeRows.content.getChild(m.homeRows.rowItemFocused[0]).getChild(m.homeRows.rowItemFocused[1])
    if not isValid(focusedItem) then return

    dialogData = []
    paramData = {
        id: focusedItem.LookupCI("id")
    }

    if isInMyListData[0]
        dialogData.push(tr("Remove From My List"))
    else
        if inArray([ItemType.EPISODE, ItemType.MOVIE, ItemType.SEASON, ItemType.SERIES, ItemType.VIDEO, ItemType.MUSICVIDEO, ItemType.RECORDING, ItemType.BOXSET], focusedItem.LookupCI("type"))
            dialogData.push(tr("Add To My List"))
        end if
    end if

    dialogData.push(tr("Add To Playlist"))

    if inArray([ItemType.EPISODE, ItemType.MOVIE, ItemType.SEASON, ItemType.SERIES, ItemType.VIDEO, ItemType.MUSICVIDEO, ItemType.RECORDING, ItemType.BOXSET, ItemType.AUDIOBOOK, ItemType.BOOK], focusedItem.LookupCI("type"))
        showBothOptions = false
        if isChainValid(focusedItem, "PlayedPercentage")
            if focusedItem.PlayedPercentage > 0
                showBothOptions = true
            end if
        end if

        if showBothOptions
            dialogData.push(tr("Mark As Unplayed"))
            dialogData.push(tr("Mark As Played"))
        else
            if isChainValid(focusedItem, "isWatched")
                if focusedItem.isWatched
                    dialogData.push(tr("Mark As Unplayed"))
                else
                    dialogData.push(tr("Mark As Played"))
                end if
            end if
        end if
    end if

    if inArray([ItemType.EPISODE, ItemType.SEASON], focusedItem.LookupCI("type"))
        dialogData.push(tr("Go To Series"))
        dialogData.push(tr("Go To Season"))
        paramData.SeasonId = focusedItem.json.LookupCI("SeasonId")
        paramData.SeriesId = focusedItem.json.LookupCI("SeriesId")
    end if


    m.global.sceneManager.callFunc("optionDialog", "libraryitem", focusedItem.LookupCI("title") ?? tr("Options"), [], dialogData, paramData)
end sub

' Special handling for key presses on the home screen.
function onKeyEvent(key as string, press as boolean) as boolean
    if not press then return false

    ' If the user hit back and is not on the first item of the row,
    ' assume they want to go to the first item of the row.
    ' Otherwise, they are exiting the app.
    if isStringEqual(key, KeyCode.Back) and m.homeRows.currFocusColumn > 0
        m.homeRows.jumpToRowItem = [m.homeRows.currFocusRow, 0]
        return true
    end if

    if isStringEqual(key, KeyCode.OPTIONS)
        if m.homeRows.hasFocus()
            focusedItem = m.homeRows.content.getChild(m.homeRows.rowItemFocused[0]).getChild(m.homeRows.rowItemFocused[1])
            if not isValidAndNotEmpty(focusedItem) then return false

            if inArray([ItemType.COLLECTIONFOLDER, ItemType.CHANNEL, ItemType.FOLDER, ItemType.PLAYLIST, ItemType.PROGRAM, ItemType.TVCHANNEL, ItemType.USERVIEW], focusedItem.type) then return false

            m.loadItemsTask1.itemId = focusedItem.LookupCI("id")
            m.loadItemsTask1.control = TaskControl.RUN
            return true
        end if
    end if

    if isStringEqual(key, KeyCode.LEFT) and m.homeRows.currFocusColumn = 0
        sidebar = m.top.getScene().findNode("sidebar")
        sidebar.isOpen = true
        sidebar.setFocus(true)
        return true
    end if

    return false
end function
