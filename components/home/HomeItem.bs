import "pkg:/source/api/baserequest.bs"
import "pkg:/source/api/Image.bs"
import "pkg:/source/enums/AnimationControl.bs"
import "pkg:/source/enums/ColorPalette.bs"
import "pkg:/source/enums/ItemType.bs"
import "pkg:/source/enums/PosterLoadStatus.bs"
import "pkg:/source/enums/SeriesStatus.bs"
import "pkg:/source/utils/config.bs"
import "pkg:/source/utils/misc.bs"

sub init()
    findNodes()

    m.itemPoster.observeField("loadStatus", "onPosterLoadStatusChanged")

    m.itemProgress.color = ColorPalette.HIGHLIGHT
    m.unplayedCount.color = ColorPalette.HIGHLIGHT
    m.playedIndicator.color = ColorPalette.HIGHLIGHT
    m.backdrop.color = ColorPalette.ELEMENTBACKGROUND
end sub

sub findNodes()
    initItemText()
    initItemPoster()
    initItemTextExtra()
    initBackdrop()
    initItemIcon()
    m.itemProgress = m.top.findNode("progress")
    m.itemProgressBackground = m.top.findNode("progressBackground")
    m.unplayedCount = m.top.findNode("unplayedCount")
    m.unplayedEpisodeCount = m.top.findNode("unplayedEpisodeCount")
    m.playedIndicator = m.top.findNode("playedIndicator")
    m.showProgressBarAnimation = m.top.findNode("showProgressBar")
    m.showProgressBarField = m.top.findNode("showProgressBarField")
end sub

sub initItemText()
    m.itemText = m.top.findNode("itemText")
end sub

sub initItemPoster()
    m.itemPoster = m.top.findNode("itemPoster")
end sub

sub initItemTextExtra()
    m.itemTextExtra = m.top.findNode("itemTextExtra")
end sub

sub initBackdrop()
    m.backdrop = m.top.findNode("backdrop")
end sub

sub initItemIcon()
    m.itemIcon = m.top.findNode("itemIcon")
end sub

sub itemContentChanged()
    if isValid(m.unplayedCount) then m.unplayedCount.visible = false
    itemData = m.top.itemContent

    if not isValid(itemData) then return
    localGlobal = m.global

    itemData.Title = itemData.name

    ' validate to prevent crash
    if not isValid(m.itemPoster) then initItemPoster()
    if not isValid(m.itemText) then initItemText()
    if not isValid(m.itemTextExtra) then initItemTextExtra()
    if not isValid(m.backdrop) then initBackdrop()
    if not isValid(m.itemIcon) then initItemIcon()

    m.itemPoster.width = itemData.imageWidth

    m.itemTextExtra.width = itemData.imageWidth
    m.itemTextExtra.visible = true
    m.itemTextExtra.text = ""
    m.itemTextExtra.font.size = 22

    m.itemText.maxWidth = itemData.imageWidth
    m.itemText.height = 34
    m.itemText.font.size = 25
    m.itemText.horizAlign = "left"
    m.itemText.vertAlign = "bottom"

    m.backdrop.width = itemData.imageWidth

    if isAllValid([m.itemIcon, itemData.iconUrl])
        m.itemIcon.uri = itemData.iconUrl
    end if

    itemDataType = isValid(itemData.type) ? LCase(itemData.type) : ""

    if not isValid(itemData.isWatched)
        itemData.isWatched = false
    end if

    m.playedIndicator.visible = itemData.isWatched

    if not itemData.isWatched
        displayUnplayedEpisodeCount(itemDataType, localGlobal, itemData)
    end if

    if inArray([ItemType.COLLECTIONFOLDER, ItemType.USERVIEW, ItemType.CHANNEL, ItemType.FOLDER], itemDataType)
        displayCollectionInfo(itemData)
        return
    end if

    playedIndicatorLeftPosition = m.itemPoster.width - 60
    m.playedIndicator.translation = [playedIndicatorLeftPosition, 0]

    ' "Program" is from clicking on an "On Now" item on the Home Screen
    if itemDataType = ItemType.PROGRAM
        displayProgramInfo(itemData)
        return
    end if

    if inArray([ItemType.EPISODE, ItemType.RECORDING], itemDataType)
        displayEpisodeInfo(localGlobal, itemData)
        return
    end if

    if inArray([ItemType.MOVIE, ItemType.MUSICVIDEO], itemDataType)
        displayMovieInfo(itemData)
        return
    end if

    if itemDataType = ItemType.VIDEO
        displayVideoInfo(itemData)
        return
    end if

    if itemDataType = ItemType.BOXSET
        displayBoxsetInfo(itemData)
        return
    end if

    if itemDataType = ItemType.SERIES
        displaySeriesInfo(itemData)
        return
    end if

    if itemDataType = ItemType.MUSICALBUM
        displayMusicAlbumInfo(itemData as object)
        return
    end if

    if itemDataType = ItemType.AUDIOBOOK
        displayAudioBookInfo(itemData as object)
        return
    end if

    if inArray([ItemType.MUSICARTIST, ItemType.AUDIO], itemDataType)
        displayAudioInfo(itemData as object)
    end if

    if itemDataType = ItemType.TVCHANNEL
        displayTVChannelInfo(itemData as object)
    end if

    if itemDataType = ItemType.SEASON
        displaySeasonInfo(itemData as object)
    end if

    if itemDataType = ItemType.PHOTO
        displayPhotoInfo(itemData as object)
        return
    end if

    if itemDataType = ItemType.PHOTOALBUM
        displayPhotoAlbumInfo(itemData as object)
        return
    end if

    print `Unhandled Home Item Type ${itemDataType}`
end sub

sub displayUnplayedEpisodeCount(itemDataType as string, localGlobal as object, itemData as object)
    if itemDataType <> ItemType.SERIES then return
    if not isChainValid(localGlobal, "session.user.settings") then return
    if localGlobal.session.user.settings["ui.tvshows.disableUnwatchedEpisodeCount"] then return
    if not isChainValid(itemData, "json.UserData.UnplayedItemCount") then return

    if itemData.json.UserData.UnplayedItemCount > 0
        if isValid(m.unplayedCount) then m.unplayedCount.visible = true
        m.unplayedEpisodeCount.text = itemData.json.UserData.UnplayedItemCount
    end if
end sub

sub displayCollectionInfo(itemData as object)
    m.itemText.text = itemData.name
    if isValidAndNotEmpty(itemData.iconUrl)
        m.itemIcon.uri = itemData.iconUrl
    end if

    if isValidAndNotEmpty(itemData.widePosterURL)
        m.itemPoster.uri = itemData.widePosterURL
    else
        m.itemPoster.uri = itemData.posterURL
    end if
end sub

sub displayPhotoAlbumInfo(itemData as object)
    m.itemText.text = itemData.name
    m.itemPoster.uri = ImageURL(itemData.LookupCI("id"))

    ' subtext
    if isValid(itemData.json.ChildCount)
        m.itemTextExtra.text = itemData.json.ChildCount.ToStr().trim() + " items"
    end if
end sub

sub displayPhotoInfo(itemData as object)
    m.itemText.text = itemData.name
    m.itemPoster.uri = ImageURL(itemData.LookupCI("id"))

    ' subtext
    if isValidAndNotEmpty(itemData.json)
        if isValid(itemData.json.ProductionYear)
            m.itemTextExtra.text = itemData.json.ProductionYear.ToStr().trim()
        end if

        if isValidAndNotEmpty(itemData.json.Album)
            if m.itemTextExtra.text = ""
                m.itemTextExtra.text = tr("Album") + ": " + itemData.json.Album.trim()
            else
                m.itemTextExtra.text = m.itemTextExtra.text + " - " + tr("Album") + ": " + itemData.json.Album.trim()
            end if
        end if
    end if
end sub

sub displaySeasonInfo(itemData as object)
    m.itemText.text = itemData.json.SeriesName
    m.itemTextExtra.text = itemData.name
    m.itemPoster.uri = ImageURL(itemData.LookupCI("id"))
end sub

sub displayTVChannelInfo(itemData as object)
    m.itemText.text = itemData.name
    m.itemTextExtra.text = itemData.json.AlbumArtist
    m.itemPoster.uri = ImageURL(itemData.LookupCI("id"))
end sub

sub displayAudioInfo(itemData as object)
    m.itemText.text = itemData.name
    m.itemTextExtra.text = itemData.json.AlbumArtist
    m.itemPoster.uri = ImageURL(itemData.LookupCI("id"))
end sub

sub displayAudioBookInfo(itemData as object)
    if itemData.PlayedPercentage > 0
        drawProgressBar(itemData)
    end if

    m.itemText.text = itemData.name
    m.itemTextExtra.text = itemData.json.AlbumArtist
    m.itemPoster.uri = ImageURL(itemData.LookupCI("id"))
end sub

sub displayMusicAlbumInfo(itemData as object)
    m.itemText.text = itemData.name
    m.itemTextExtra.text = itemData.json.AlbumArtist
    m.itemPoster.uri = itemData.posterURL
end sub

sub displaySeriesInfo(itemData as object)
    m.itemText.text = itemData.name

    if itemData.usePoster
        m.itemPoster.uri = itemData.imageWidth = 180 ? itemData.posterURL : itemData.widePosterURL
    else
        m.itemPoster.uri = itemData.thumbnailURL
    end if

    textExtra = ""
    if isValid(itemData.json.ProductionYear)
        textExtra = StrI(itemData.json.ProductionYear).trim()
    end if

    ' Set Years Run for Extra Text
    if isValid(itemData.json.Status)
        if LCase(itemData.json.Status) = SeriesStatus.CONTINUING
            textExtra = textExtra + " - Present"
        else if LCase(itemData.json.Status) = SeriesStatus.ENDED and isValid(itemData.json.EndDate)
            textExtra = textExtra + " - " + LEFT(itemData.json.EndDate, 4)
        end if
    end if
    m.itemTextExtra.text = textExtra
end sub

sub displayBoxsetInfo(itemData as object)
    m.itemText.text = itemData.name
    m.itemPoster.uri = itemData.posterURL

    ' Set small text to number of items in the collection
    if isChainValid(itemData, "json.ChildCount")
        m.itemTextExtra.text = StrI(itemData.json.ChildCount).trim() + " item"
        if itemData.json.ChildCount > 1
            m.itemTextExtra.text += "s"
        end if
    end if
end sub

sub displayVideoInfo(itemData as object)
    m.itemText.text = itemData.name

    if itemData.PlayedPercentage > 0
        drawProgressBar(itemData)
    end if

    m.itemPoster.uri = itemData.imageWidth = 180 ? itemData.posterURL : itemData.thumbnailURL
end sub

sub displayMovieInfo(itemData as object)
    m.itemText.text = itemData.name

    if itemData.PlayedPercentage > 0
        drawProgressBar(itemData)
    end if

    ' Use best image, but fallback to secondary if it's empty
    if (itemData.imageWidth = 180 and itemData.posterURL <> "") or itemData.thumbnailURL = ""
        m.itemPoster.uri = itemData.posterURL
    else
        m.itemPoster.uri = itemData.thumbnailURL
    end if

    ' Set Release Year and Age Rating for Extra Text
    textExtra = ""
    if isValid(itemData.json.ProductionYear)
        textExtra = StrI(itemData.json.ProductionYear).trim()
    end if

    if isValid(itemData.json.OfficialRating)
        if textExtra = ""
            textExtra = itemData.json.OfficialRating
        else
            textExtra = `${textExtra} - ${itemData.json.OfficialRating}`
        end if
    end if
    m.itemTextExtra.text = textExtra
end sub

sub displayProgramInfo(itemData as object)
    m.itemText.Text = itemData.json.name
    m.itemTextExtra.Text = itemData.json.ChannelName
    m.itemPoster.uri = itemData.usePoster ? itemData.thumbnailURL : ImageURL(itemData.json.ChannelId)
    m.itemPoster.loadDisplayMode = "scaleToFill"

    ' Set Episode title if available
    if isValid(itemData.json.EpisodeTitle)
        m.itemTextExtra.text = itemData.json.EpisodeTitle
    end if
end sub

sub displayEpisodeInfo(localGlobal as object, itemData as object)
    if isChainValid(itemData, "json.SeriesName")
        m.itemText.text = itemData.json.SeriesName
    end if

    if isValid(itemData.LookupCI("PlayedPercentage"))
        if itemData.LookupCI("PlayedPercentage") > 0
            drawProgressBar(itemData)
        end if
    end if

    episodeimagesnextupSetting = chainLookup(localGlobal, "session.user.settings.ui-general-episodeimagesnextup")

    ' Default to wide poster image
    m.itemPoster.uri = itemData.LookupCI("widePosterURL")

    if isValid(episodeimagesnextupSetting)
        if isStringEqual(episodeimagesnextupSetting, "webclient")
            useEpisodeImagesInNextUpAndResumeSetting = chainLookup(localGlobal, "session.user.Configuration.useEpisodeImagesInNextUpAndResume")
            if isValid(useEpisodeImagesInNextUpAndResumeSetting) and useEpisodeImagesInNextUpAndResumeSetting
                m.itemPoster.uri = itemData.LookupCI("thumbnailURL")
            else
                m.itemPoster.uri = itemData.LookupCI("widePosterURL")
            end if
        else if isStringEqual(episodeimagesnextupSetting, "show")
            m.itemPoster.uri = itemData.LookupCI("widePosterURL")
        else if isStringEqual(episodeimagesnextupSetting, "episode")
            m.itemPoster.uri = itemData.LookupCI("thumbnailURL")
        end if
    end if

    ' Set Series and Episode Number for Extra Text
    extraPrefix = ""
    if isChainValid(itemData, "json.ParentIndexNumber")
        extraPrefix = "S" + StrI(itemData.json.ParentIndexNumber).trim()
    end if

    if isChainValid(itemData, "json.IndexNumber")
        extraPrefix = extraPrefix + "E" + StrI(itemData.json.IndexNumber).trim()
    end if

    if extraPrefix.len() > 0
        extraPrefix = extraPrefix + " - "
    end if

    if isValid(m.itemTextExtra)
        m.itemTextExtra.text = extraPrefix + itemData.LookupCI("name")
    end if
end sub

'
' Draws and animates item progress bar
sub drawProgressBar(itemData)
    if not isValid(itemData.LookupCI("imageWidth")) then return

    m.itemProgressBackground.width = itemData.LookupCI("imageWidth")
    m.itemProgressBackground.visible = true
    m.showProgressBarField.keyValue = [0, m.itemPoster.width * (itemData.PlayedPercentage / 100)]
    m.showProgressBarAnimation.control = AnimationControl.START
end sub

'
' Enable title scrolling based on item Focus
sub focusChanged()
    m.itemText.repeatCount = m.top.itemHasFocus ? - 1 : 0
end sub

'Hide backdrop and icon when poster loaded
sub onPosterLoadStatusChanged()
    if m.itemPoster.loadStatus = PosterLoadStatus.READY and m.itemPoster.uri <> ""
        m.backdrop.visible = false
        m.itemIcon.visible = false
    else
        m.backdrop.visible = true
        m.itemIcon.visible = true
    end if
end sub
